spring.application.name=api-gateway
server.port=8765

#It will automatically register to the naming server without specifying below property.
#However if we have this in our property file then we can connect to different eureka server by chanding this uri.
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka

spring.config.import=optional:configserver:

############################# Route to eureka registered microservices using api gateway #####################
#If you want to use custom routes, then comment both locator.enabled andlocator.lowercase.
#For creating custom routes, you need to use RouteLocatorBuilder. Check out ApiGatewayConfiguration class.

#WITH THIS OPTION API GATE CAN DISCOVER OTHER SERVICES REGISTERED WITH EUREKA
#spring.cloud.gateway.discovery.locator.enabled=true #Now using custom routes using RouteLocatorBuilder. So commented this.

#It is useful in order to make hostname shown in eureka to lowercase, so as to use by api gateway in invoking services
#normally it is like http://localhost:8765/CURRENCY-EXCHANGE/currency-exchange/from/USD/to/INR
#spring.cloud.gateway.discovery.locator.lowerCaseServiceId=true #Now using custom routes using RouteLocatorBuilder. So commented this.

########-----URL's------##################
#http://localhost:8765/currency-exchange/currency-exchange/from/USD/to/INR
#http://localhost:8765/currency-conversion/currency-conversion/from/USD/to/INR/quantity/10
#http://localhost:8765/currency-conversion/currency-conversion-feign/from/USD/to/INR/quantity/10
######-------------------------------####

###During tutorials it wasn't routing using api gateway. To solve this add below property to all the microservices instances
#eureka.instance.hostname=localhost
#You can change it to any custom host
##############################################################################################################


